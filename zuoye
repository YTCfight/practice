#define _CRT_SECURE_NO_WARNINGS 
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<assert.h>
#include<math.h> 
#include<string.h>
//打印1-100之间的素数
//int main()
//{
//	int i = 0;
//	int j = 0;
//	for (i = 3; i <= 100; i+=2)
//	{
//		for (j = 2; j < i; j++)
//		{
//			if (i%j == 0)
//			{
//				break;
//			}
//		}
//		if (j == i)
//		{
//			printf("%d ", i);
//		}
//	}
//	printf("\n");
//	system("pause");
//	return 0;
//}
//输出乘法口诀表
//int main()
//{
//	int i = 0;
//	int j = 0;
//	int input = 0;
//	scanf("%d", &input);
//	for (i = 1; i <= input; i++)
//	{
//		for (j = 1; j <= i; j++)
//		{
//			printf("%d*%d=%-d ", j, i, i*j);
//		}
//		printf("\n");
//	}
//	system("pause");
//	return 0;
//}
//求1000到2000之间的闰年
//int main()
//{
//	int i = 0;
//	for (i = 1000; i <= 2000; i++)
//	{
//		if (i % 4 == 0 && i % 100 != 0 || i % 400==0)
//		{
//			printf("%d ", i);
//		}
//	}
//	printf("\n");
//	system("pause");
//	return 0;
//}
//交换两个数的值
//void swap(int* p1, int* p2)
//{
//	int ret = 0;
//	ret =* p1;
//	*p1 = *p2;
//	*p2 = ret;
//}
//int main()
//{
//	int a = 1;
//	int b = 2;
//	int* p1 = &a;
//	int* p2 = &b;
//	printf("%d %d\n", a, b);
//	swap(p1,p2);
//	printf("%d %d\n", a, b);
//	system("pause");
//	return 0;
//}
//不允许创建临时变量，交换两个数的内容
//int main()
//{
//	int a = 1;
//	int b = 2;
//	a = a^b;
//	b = a^b;
//	a = a^b;
//	printf("%d %d\n", a, b);
//	system("pause");
//	return 0;
//}
//int main()
//{
//	int a = 1;
//	int b = 2;
//	a = a + b;
//	b = a - b;
//	a = a - b;
//	printf("%d %d\n", a, b);
//	system("pause");
//	return 0;
//}
//求10个整数中的最大值
//int Max(int* arr,int len)
//{
//	int max = arr[0];
//	int i = 0;
//	for (i = 0; i < len; i++)
//	{
//		if (max < arr[i])
//		{
//			max = arr[i];
//		}
//	}
//	return max;
//}
//int main()
//{
//	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//	int max = 0;
//	int len = sizeof(arr) / sizeof(arr[0]);
//	max=Max(arr,len);
//	printf("%d\n", max);
//	system("pause");
//	return 0;
//}
//将三个数从大到小输出
//int Max(int a, int b)
//{ 
//	return a > b ? a : b;
//}
//int Fun(int c, int(*p)(int, int))
//{
//	int ret = p(1, 2);
//	return c > ret ? c : ret;
//}
//int main()
//{
//	int max = 0;
//	max=Fun(3, Max);
//	printf("%d\n", max);
//	system("pause");
//	return 0;
//}
//求两个数的最大公约数(三种方法）
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int c = 0;
//	scanf("%d%d", &a, &b);
//	if (a > b)
//	{
//		c = b;
//	}
//	else
//	{
//		c = a;
//	}
//	while (a%c != 0 || b%c != 0)
//	{
//		c--;
//	}
//	printf("%d\n", c);
//	system("pause");
//	return 0;
//}
//将数组A和数组B的内容进行交换，数组一样大
//void Print(int arr[],int len)
//{
//	int i = 0;
//	for (i = 0; i < len; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	printf("\n");
//}
//int main()
//{
//	int arr1[] = { 1, 2, 3, 4 };
//	int arr2[] = { 5, 6, 7, 8 };
//	int len = sizeof(arr1) / sizeof(arr1[0]);
//	int temp = 0;
//	int i = 0;
//	for (i = 0; i < len; i++)
//	{
//		temp = arr1[i];
//		arr1[i] = arr2[i];
//		arr2[i] = temp;
//	}
//	Print(arr1,len);
//	Print(arr2,len);
//	system("pause");
//	return 0;
//}
//计算1/1-1/2+1/3-1/4+1/5 …… + 1/99 - 1/100 的值
//int main()
//{
//	int i = 0;
//	int flag = 1;
//	float sum = 0.0;
//	for (i = 1; i <=100; i++)
//	{
//		sum += flag*(1.0 / i);
//		flag = -flag;
//	}
//	printf("sum is %f\n", sum);
//	system("pause");
//	return 0;
//}
//编写程序数一下1到100有多少个9
//int main()
//{
//	int i = 0;
//	int count = 0;
//	for (i = 1; i <= 100; i++)
//	{
//		if (i % 10 == 9)
//		{
//			count++;
//		}
//		if (i / 10 == 9)
//		{
//			count++;
//		}
//	}
//	printf("%d\n", count);
//	system("pause");
//	return 0;
//}
//1.在屏幕上输出以下图案： 
//*
//***
//*****
//*******
//*********
//***********
//*************
//***********
//*********
//*******
//*****
//***
//*
//int main()
//{
//	int i = 0;
//	int j = 0;
//	int input = 0;
//	scanf("%d", &input);
//	for (i = 1; i <=(input/2+1); i++)//打印几行
//	{
//		for (j = 0; j < (2 * i - 1); j++)//每行打印几个
//		{
//			printf("*");
//		}
//		printf("\n");
//	}
//	for (i = input/2; i >= 1; i--)
//	{
//		for (j = 0; j < (2 * i - 1); j++)
//		{
//			printf("*");
//		}
//		printf("\n");
//	}
//	system("pause");
//	return 0;
//}
//求出0到999之间的水仙花数，并输出
//方法一
//int main()
//{
//	int i = 0;
//	int count = 0;
//	for (i = 0; i < 1000; i++)
//	{
//		if (i < 10)           //个位数中
//		{
//			if (i == pow(i, 3))
//			{
//				printf("%d ", i);
//				count++;
//			}
//		}
//		if (i >= 10 && i < 100) //十位数中
//		{
//			if (i == pow(i % 10, 3) + pow(i / 10, 3))
//			{
//				printf("%d ", i);
//				count++;
//			}
//		}
//		if (i >= 100 && i < 1000)
//		{
//			if (i == pow(i % 10, 3) + pow(i / 100, 3) + pow(i / 10 % 10, 3))
//			{
//				printf("%d ", i);
//				count++;
//			}
//		}
//	}
//	printf("\n");
//	printf("count=%d\n", count);
//	system("pause");
//	return 0;
//}
//方法二
//int main()
//{
//	int i = 0;
//	int g = 0;
//	int s = 0;
//	int b = 0;
//	for (i = 0; i < 1000; i++)
//	{
//		g = i % 10;
//		s = i / 10 % 10;
//		b = i / 100;
//		if (i == g*g*g + s*s*s + b*b*b)
//		{
//			printf("%d ", i);
//		}
//	}
//	printf("\n");
//	system("pause");
//	return 0;
//}
//求Sn=a+aa+aaa+aaaa+aaaaa的前5项之和，其中a是一个数字， 
//例如：2 + 22 + 222 + 2222 + 22222

//int main()
//{
//	int input = 0;
//	scanf("%d", &input);
//	int Sn = input;
//	int ret = 0;
//	int i = 0;
//	for (i = 0; i < 5; i++)
//	{
//		ret = input + ret * 10;
//		Sn += ret;
//	}
//	printf("%d\n", Sn);
//	system("pause");
//	return 0;
//}
//完成猜数字游戏
//void menu()
//{
//	printf("****************\n");
//	printf("***  0.exit  ***\n");
//	printf("***  1.play  ***\n");
//	printf("****************\n");
//}
//void game()
//{
//	int guess = 0;
//	int ret = rand() % 100 + 1;
//	printf("请输入答案\n");
//	while (1)
//	{
//		scanf("%d", &guess);
//		if (guess > ret)
//		{
//			printf("猜大了\n");
//		}
//		else if (guess < ret)
//		{
//			printf("猜小了\n");
//		}
//		else
//		{
//			printf("猜对了\n");
//			break;
//		}
//	}
//}
//int main()
//{
//	int input = 0;
//	srand((unsigned int)time(NULL));
//	do
//	{
//		menu();
//		printf("请选择:->\n");
//		scanf("%d", &input);
//		switch (input)
//		{
//		case 0:
//			printf("退出游戏\n");
//			break;
//		case 1:
//			printf("进入游戏\n");
//			game();
//			break;
//		default:
//			printf("选择错误，请重新选择\n");
//			break;
//		}
//	} while (input);
//	system("pause");
//	return 0;
//}
//折半查找（前提是在有序的数组中）
//int Seek(int arr[], int len,int input)
//{
//	int left = 0;
//	int right = len - 1;
//	int i = 0;
//	int mid = 0;
//	while (left<=right)
//	{
//		mid = left + (right - left) / 2;
//		if (input>arr[mid])
//		{
//			left = mid + 1;
//		}
//		else if (input < arr[mid])
//		{
//			right = mid - 1;
//		}
//		else
//		{
//			return mid;
//		}
//	}
//	return -1;
//}
//int main()
//{
//	int input = 0;
//	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
//	int len = sizeof(arr) / sizeof(arr[0]);
//	scanf("%d", &input);
//	int ret = Seek(arr, len,input);
//	if (ret !=-1)
//	{
//		printf("找到了，下标为%d\n", ret);
//	}
//	else
//	{
//		printf("没找到\n");
//	}
//	system("pause");
//	return 0;
//}
//编写代码模拟三次密码输入的场景。
//最多能输入三次密码，密码正确，提示“登录成功”, 密码错误，
//可以重新输入，最多输入三次。三次均错，则提示退出程序。
//int main()
//{
//	char arr1[] = {0};
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//		printf("请输入密码,最多输入三次\n");
//		scanf("%s", arr1);
//		if (strcmp(arr1, "123") == 0)
//		{
//			printf("登陆成功\n");
//			break;
//		}
//	}
//	if (i == 3)
//	{
//		printf("密码输入达到上限，退出程序\n");
//	}
//	system("pause");
//	return 0;
//}
//编写一个程序，可以一直接收键盘字符，
//如果是小写字符就输出对应的大写字符，
//如果接收的是大写字符，就输出对应的小写字符，
//如果是数字不输出。
//void Change(char arr[],int len)
//{
//	int i = 0;
//	for (i = 0; i < len;i++)
//	{
//		if (*arr >= 'A' && *arr <= 'Z')
//		{
//			printf("%c", *arr + 32);
//			arr++;
//		}
//		if (*arr >= 'a' && *arr <= 'z')
//		{
//			printf("%c", *arr - 32);
//			arr++;
//		}
//	}
//	printf("\n");
//}
//int main()
//{
//	char arr[10] = { 0 };
//	scanf("%s", arr);
//	int len = sizeof(arr) / sizeof(arr[0]);
//	Change(arr,len);
//	system("pause");
//	return 0;
//}
//
//实现一个函数，打印乘法口诀表，口诀表的行数和列数自己指定，
//输入9，输出9 * 9口诀表，输入12，输出12 * 12的乘法口诀表。
//void Printmul(int input)
//{
//	int i = 0;
//	int j = 0;
//	for (i = 1; i <= input; i++)
//	{
//		for (j = 1; j <= i; j++)
//		{
//			printf("%d*%d=%-2d  ", i, j, i*j);
//		}
//		printf("\n");
//	}
//}
//int main()
//{
//	int input = 0;
//	scanf("%d", &input);
//	Printmul(input);
//	system("pause");
//	return 0;
//}
//使用函数实现两个数的交换
//void Swap(int* p1, int * p2)
//{
//	int temp = 0;
//	temp = *p1;
//	*p1 = *p2;
//	*p2 = temp;
//}
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int* p1 = &a;
//	int* p2 = &b;
//	scanf("%d%d", &a, &b);
//	printf("%d %d\n", a, b);
//	Swap(p1, p2);
//	printf("%d %d\n", a, b);
//	system("pause");
//	return 0;
//}
//实现一个函数判断year是不是闰年。
//int Leapyear(int year)
//{
//	if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0)
//	{
//		return 1;
//	}
//	else
//	{
//		return 0;
//	}
//}
//int main()
//{
//	int year = 0;
//	int ret = 0;
//	scanf("%d", &year);
//	ret=Leapyear(year);
//	if (ret == 1)
//	{
//		printf("%d is leap year\n",year);
//	}
//	else
//	{
//		printf("%d is not leap year\n", year);
//	}
//	system("pause");
//	return 0;
//}
//实现一个函数，判断一个数是不是素数。
//int Primenum(input)
//{
//	int i = 0;
//	if (input >= 2)
//	{
//		for (i = 2; i < input; i++)
//		{
//			if (input%i == 0)
//			{
//				return 0;
//				break;
//			}
//		}
//		return 1;
//	}
//	else
//	{
//		return 0;
//	}
//}
//int main()
//{
//	int input = 0;
//	int ret = 0;
//	scanf("%d", &input);
//	ret=Primenum(input);
//	if (ret == 1)
//	{
//		printf("%d is prime number\n", input);
//	}
//	else
//	{
//		printf("%d is not prime number\n", input);
//	}
//	system("pause");
//	return 0;
//}
//递归和非递归分别实现求第n个斐波那契数。
//递归
//int Fibonacci(int input)
//{
//	if (input > 2)
//	{
//		return Fibonacci(input - 1) + Fibonacci(input - 2);
//	}
//	return 1;
//}
//int main()
//{
//	int input = 0;
//	int ret = 0;
//	scanf("%d", &input);
//	ret=Fibonacci(input);
//	printf("%d\n", ret);
//	system("pause");
//	return 0;
//}
//非递归
//int Fibonacci(int input)
//{
//	int i = 0;
//	int sum = 0;
//	int a = 1;
//	int b = 1;
//	if (input <= 2)
//	{
//		return 1;
//	}
//	else
//	{
//		for (i = 2; i < input; i++)
//		{
//			sum = a + b;
//			a = b;
//			b = sum;
//		}
//	}
//	return sum;
//}
//int main()
//{
//	int input = 0;
//	int ret = 0;
//	scanf("%d", &input);
//	ret=Fibonacci(input);
//	printf("%d\n", ret);
//	system("pause");
//	return 0;
//}
//编写一个函数n^k,用递归实现
//int Power(int a, int b)
//{
//	if (b > 0)
//	{
//		return a*Power(a, b - 1);
//	}
//	return 1;
//}
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int ret = 0;
//	scanf("%d%d", &a, &b);
//	ret=Power(a, b);
//	printf("%d\n", ret);
//	system("pause");
//	return 0;
//}
//写一个递归函数DigitSum(n)，输入一个非负整数，返回组成它的数字之和， 
//例如，调用DigitSum(1729)，则应该返回1 + 7 + 2 + 9，它的和是19
//int DigitSum(int n)
//{
//	if (n > 9)
//	{
//		return n % 10 + DigitSum(n / 10);
//	}
//	return n % 10;
//}
//int main()
//{
//	int n = 0;
//	int ret = 0;
//	scanf("%d", &n);
//	ret=DigitSum(n);
//	printf("%d\n", ret);
//	system("pause");
//	return 0;
//}
//打印整数的每一位（递归实现）
//void Print(int input)
//{
//	if (input > 9)
//	{
//		Print(input/ 10);
//	}
//	printf("%d ", input % 10);
//}
//int main()
//{
//	int input = 0;
//	scanf("%d", &input);
//	Print(input);
//	system("pause");
//	return 0;
//}
//递归和非递归分别实现strlen
//递归
//int Cul(char arr[])
//{
//	if (*arr != '\0')
//	{
//		return 1 + Cul(arr+1);
//	}
//	return 0;
//}
//int main()
//{
//	char arr[] = "hello bit";
//	int ret = 0;
//	ret = Cul(arr);
//	printf("%d\n", ret);
//	system("pause");
//	return 0;
//}
//非递归
//int Cul(char arr[])
//{
//	int count = 0;
//	while (*arr != '\0')
//	{
//		count++;
//		arr++;
//	}
//	return count;
//}
//int main()
//{
//	char arr[] = "hello bit";
//	int ret = 0;
//	ret = Cul(arr);
//	printf("%d\n", ret);
//	system("pause");
//	return 0;
//}
//递归和非递归分别实现求n的阶乘
//递归
//int Cul(int a, int b)
//{
//	if (b > 0)
//	{
//		return a*Cul(a, b - 1);
//	}
//	return 1;
//}
//int main()
//{
//	int a = 0;
//	int b = 0;
//	scanf("%d%d", &a, &b);
//	int ret = 0;
//	ret = Cul(a, b);
//	printf("%d\n", ret);
//	system("pause");
//	return 0;
//}
//非递归
//int Cul(int a, int b)
//{
//	int sum = 1;
//	while (b)
//	{
//		sum = sum*a;
//		b--;
//	}
//	return sum;
//}
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int ret = 0;
//	scanf("%d%d", &a, &b);
//	ret = Cul(a, b);
//	printf("%d\n", ret);
//	system("pause");
//	return 0;
//}
//写一个函数返回参数二进制中 1 的个数 
//方法一
//int count_one_bits(unsigned int input)
//{
//	int count = 0;
//	while (input)
//	{
//		if (input % 2 == 1)
//		{
//			count++;
//		}
//		input = input >> 1;
//	}
//	return count;
//}
//int main()
//{
//	int input = 0;
//	int ret = 0;
//	scanf("%d", &input);
//	ret=count_one_bits(input);
//	printf("%d\n", ret);
//	system("pause");
//	return 0;
//}
//方法二
//int count_one_bits(int input)
//{
//	int i = 0;
//	int count = 0;
//	for (i = 0; i < 32; i++)
//	{
//		if ((input>>i&1)==1)
//		{
//			count++;
//		}
//	}
//	return count;
//}
//int main()
//{
//	int input = 0;
//	scanf("%d", &input);
//	int ret = 0;
//	ret = count_one_bits(input);
//	printf("%d\n", ret);
//	system("pause");
//	return 0;
//}
//方法三（最有意思的方法）
//int count_one_bits(int input)
//{
//	int count = 0;
//	while (input)
//	{
//		count++;
//		input = input&(input - 1);
//	}
//	return count;
//}
//int main()
//{
//	int input = 0;
//	scanf("%d", &input);
//	int ret = 0;
//	ret =  count_one_bits(input);
//	printf("%d\n", ret);
//	system("pause");
//	return 0;
//}
//获取一个数二进制序列中所有的偶数位和奇数位， 分别输出二进制序列
//void count_bit(int input)
//{
//	int i = 0;
//	printf("奇数位：\n");
//	for (i = 0; i < 32; i+=2)
//	{
//		printf("%d ", (input>>i)&1);
//	}
//	printf("\n");
//	printf("偶数位：\n");
//	for (i = 1; i < 32; i += 2)
//	{
//		printf("%d ", (input>>i) & 1);
//	}
//	printf("\n");
//}
//int main()
//{
//	int input = 0;
//	scanf("%d", &input);
//	count_bit(input);
//	system("pause");
//	return 0;
//}
// 输出一个整数的每一位。 
//递归
//void Print(int input)
//{
//	if (input > 9)
//	{
//		Print(input / 10);
//	}
//	printf("%d ", input % 10);
//}
//int main()
//{
//	int input = 0;
//	scanf("%d", &input);
//	Print(input);
//	system("pause");
//	return 0;
//}
//非递归
//void Print(int input)
//{
//	while (input)
//	{
//		printf("%d ", input % 10);
//		input = input / 10;
//	}
//}
//int main()
//{
//	int input = 0;
//	scanf("%d", &input);
//	Print(input);
//	system("pause");
//	return 0;
//}
//.编程实现： 
//两个int（32位）整数m和n的二进制表达中，有多少个位(bit)不同？
//输入例子 :
//1999 2299
//输出例子 : 7
int differentbit(int m, int n)
{
	int i = 0;
	int count = 0;
	for (i = 0; i < 32;i++)
	{
		if ((m >> i & 1) != (n >> i & 1))
		{
			count++;
		}
	}
	return count;
}
int main()
{
	int m = 0;
	int n = 0;
	int ret = 0;
	scanf("%d%d", &m, &n);
	ret=differentbit(m, n);
	printf("%d\n", ret);
	system("pause");
	return 0;
}
